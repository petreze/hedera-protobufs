/**
 * # Submit Message
 * Submit a message to a topic via the Hedera Consensus Service (HCS).
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).
 */
syntax = "proto3";

package proto;

/*-
 *
 * Hedera Network Services Protobuf
 *
 * Copyright (C) 2018 - 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.consensus">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";

/**
 * Information describing the way in which a message submitted for consensus is broken into
 * multiple fragments to fit within network transaction size limits.
 */
message ConsensusMessageChunkInfo {
    /**
     * The TransactionID of the first chunk.
     * This MUST be set for every chunk in a fragmented message.
     */
    TransactionID initialTransactionID = 1;

    /**
     * The total number of chunks in the message.
     */
    int32 total = 2;

    /**
     * The sequence number (from 1 to total) of the current chunk in the message.
     */
    int32 number = 3;
}

/**
 * Submit a message for consensus.<br/>
 * Valid and authorized messages on valid topics will be ordered by the consensus service,
 * published in the block stream, and available to all subscribers on this topic via the mirror
 * nodes.<br/>
 * If this transaction succeeds the resulting `TransactionReceipt` SHALL contain the latest
 * `topicSequenceNumber` and `topicRunningHash` for the topic.<br/>
 * If the topic has a `submitKey` then that key MUST sign this transaction.
 */
message ConsensusSubmitMessageTransactionBody {
    /**
     * Topic to submit message to.
     */
    TopicID topicID = 1;

    /**
     * Message to be submitted. Max size of the Transaction (including signatures) is 6KiB.
     */
    bytes message = 2;

    /**
     * Optional information of the current chunk in a fragmented message.
     */
    ConsensusMessageChunkInfo chunkInfo = 3;
}
