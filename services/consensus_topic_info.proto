/**
 * # Topic Information
 * Query response describing a topic of the Hedera Consensus Service (HCS).
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).
 */
syntax = "proto3";

package proto;

/*-
 *
 * Hedera Network Services Protobuf
 *
 * Copyright (C) 2018 - 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.consensus">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";
import "duration.proto";
import "timestamp.proto";

/**
 * A query response describing the current state of a topic for the Hedera Consensus Service (HCS).
 */
message ConsensusTopicInfo {
    /**
     * The memo associated with this topic.
     * This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed 100 bytes when so encoded.
     */
    string memo = 1;


    /**
     * When a topic is created, its running hash is initialized to 48 bytes of binary zeros.
     * For each submitted message, the topic's running hash is then updated to the output
     * of a particular SHA-384 digest whose input data include the previous running hash.
     * <p>
     * The latest running hash of the topic.<br/>
     * This 48-byte field is the output of a SHA-384 digest with input data determined by the
     * value of the topicRunningHashVersion as indicated below.<br/>
     * The bytes of each uint64 or uint32 encoded for the hash input MUST be in Big-Endian format.
     * <p>
     * <hr/>
     * If the topicRunningHashVersion is '0' or '1', then the input data to the SHA-384 digest are,
     * in order:
     * <ol>
     *   <li>The previous running hash of the topic (48 bytes)</li>
     *   <li>The topic's shard (8 bytes)</li>
     *   <li>The topic's realm (8 bytes)</li>
     *   <li>The topic's number (8 bytes)</li>
     *   <li>The number of seconds since the epoch before the ConsensusSubmitMessage reached
     *    consensus (8 bytes)</li>
     *   <li>The number of nanoseconds since 5. before the ConsensusSubmitMessage reached
     *    consensus (4 bytes)</li>
     *   <li>The topicSequenceNumber from above (8 bytes)</li>
     *   <li>The message bytes from the ConsensusSubmitMessage (variable).</li>
     * </ol>
     * <hr/>
     * If the topicRunningHashVersion is '2', then the input data to the SHA-384 digest are, in
     * order:
     * <ol>
     *   <li>The previous running hash of the topic (48 bytes)</li>
     *   <li>The topicRunningHashVersion below (8 bytes)</li>
     *   <li>The topic's shard (8 bytes)</li>
     *   <li>The topic's realm (8 bytes)</li>
     *   <li>The topic's number (8 bytes)</li>
     *   <li>The number of seconds since the epoch before the ConsensusSubmitMessage reached
     *    consensus (8 bytes)</li>
     *   <li>The number of nanoseconds since 6. before the ConsensusSubmitMessage reached
     *    consensus (4 bytes)</li>
     *   <li>The topicSequenceNumber from above (8 bytes)</li>
     *   <li>The output of the SHA-384 digest of the message bytes from the
     *    consensusSubmitMessage (48 bytes)</li>
     * </ol>
     * <hr/>
     * If the topicRunningHashVersion is '3', then the input data to the SHA-384 digest
     * are, in order:
     * <ol>
     *   <li>The previous running hash of the topic (48 bytes)</li>
     *   <li>The topicRunningHashVersion below (8 bytes)</li>
     *   <li>The payer account's shard (8 bytes)</li>
     *   <li>The payer account's realm (8 bytes)</li>
     *   <li>The payer account's number (8 bytes)</li>
     *   <li>The topic's shard (8 bytes)</li>
     *   <li>The topic's realm (8 bytes)</li>
     *   <li>The topic's number (8 bytes)</li>
     *   <li>The number of seconds since the epoch before the ConsensusSubmitMessage reached
     *    consensus (8 bytes)</li>
     *   <li>The number of nanoseconds since 9. before the ConsensusSubmitMessage reached
     *     consensus (4 bytes)</li>
     *   <li>The topicSequenceNumber from above (8 bytes)</li>
     *   <li>The output of the SHA-384 digest of the message bytes from the
     *     consensusSubmitMessage (48 bytes)</li>
     * </ol>
     */
    bytes runningHash = 2;

    /**
     * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.
     */
    uint64 sequenceNumber = 3;

    /**
     * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic
     * and the topic will expire and after AUTORENEW_GRACE_PERIOD be automatically deleted.
     */
    Timestamp expirationTime = 4;

    /**
     * Access control for update/delete of the topic. Null if there is no key.
     */
    Key adminKey = 5;

    /**
     * Access control for ConsensusService.submitMessage. Null if there is no key.
     */
    Key submitKey = 6;

    /**
     * If an auto-renew account is specified, when the topic expires, its lifetime will be extended
     * by up to this duration (depending on the solvency of the auto-renew account). If the
     * auto-renew account has no funds at all, the topic will be deleted instead.
     */
    Duration autoRenewPeriod = 7;

    /**
     * The account, if any, to charge for automatic renewal of the topic's lifetime upon expiry.
     */
    AccountID autoRenewAccount = 8;

    /**
     * The ledger ID the response was returned from; please see <a href="https://github.com/hashgraph/hedera-improvement-proposal/blob/master/HIP/hip-198.md">HIP-198</a> for the network-specific IDs.
     */
    bytes ledger_id = 9;
}
